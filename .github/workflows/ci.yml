name: CI Build

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install, lint and test
        run: |
          npm ci
          npm run lint
          npm run test:ci
  
      - name: Prepare Release Artifact
        id: prepare_release
        run: |
          chmod +x ./prepare_release.sh
          ./prepare_release.sh
      
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: release-archive
          path: releases/*

  test_integration_with_dimensions:
    runs-on: ubuntu-latest
    needs: [build_and_test]

    steps:
      - name: Use Node.js 20.x
        uses: actions/setup-node@v1
        with:
          node-version: 20.x

      - name: Download the extension from artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-archive
          path: releases

      - name: Setup Dimensions
        run: |
          DIMENSIONS_VERSION=6.1.0
          wget https://github.com/popstarfreas/Dimensions/releases/download/v$DIMENSIONS_VERSION/Dimensions-v$DIMENSIONS_VERSION.zip -O dimensions.zip
          unzip dimensions.zip
          cd Dimensions
          npm install --omit=dev
          cp config.js.example config.js
          mkdir build/extensions
      
      - name: Install the extension in Dimensions
        run: |
          cd releases
          rm *.zip
          mv * ../Dimensions/build/extensions/

      - name: Check if the extension works
        run: |
          cd Dimensions
          npm run start &
          PID=$!
          sleep 10
          timeout 3 bash -c "</dev/tcp/127.0.0.1/3000" && echo "Open" || echo "Closed"
          curl http://127.0.0.1:3000 | jq
          kill $PID

  release:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags/v')
    needs: [test_integration_with_dimensions]

    steps:
      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-archive
          path: releases

      - name: Check if tag matches the version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          ls "releases/SwitchServersByAPI_$TAG_NAME.zip"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: "SwitchServersByAPI v${{ env.TAG_NAME }}"
          files: releases/*